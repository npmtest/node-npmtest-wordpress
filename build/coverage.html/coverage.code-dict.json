{"/home/travis/build/npmtest/node-npmtest-wordpress/test.js":"/* istanbul instrument in package npmtest_wordpress */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wordpress/lib.npmtest_wordpress.js":"/* istanbul instrument in package npmtest_wordpress */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_wordpress = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_wordpress = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-wordpress/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-wordpress && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_wordpress */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_wordpress\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_wordpress.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_wordpress.rollup.js'] =\n            local.assetsDict['/assets.npmtest_wordpress.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_wordpress.__dirname + '/lib.npmtest_wordpress.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-wordpress/node_modules/wordpress/lib/wordpress.js":"var url = require( \"url\" ),\n\txmlrpc = require( \"xmlrpc\" ),\n\tfieldMap = require( \"./fields\" );\n\n// http://codex.wordpress.org/XML-RPC_Support\n// http://codex.wordpress.org/XML-RPC_WordPress_API\n\nfunction extend( a, b ) {\n\tfor ( var p in b ) {\n\t\ta[ p ] = b[ p ];\n\t}\n\n\treturn a;\n}\n\nfunction parseArguments( args ) {\n\treturn [].slice.call( args, 1 )\n\n\t\t// Remove null arguments\n\t\t// Null values only exist for optional fields. As of WordPress 4.4,\n\t\t// null is no longer treated the same as omitting the value. To\n\t\t// compensate for this, we just drop the argument before calling\n\t\t// into WordPress. See #25.\n\t\t.filter(function( value ) {\n\t\t\treturn value !== null;\n\t\t});\n}\n\nfunction Client( settings ) {\n\t[ \"url\", \"username\", \"password\" ].forEach(function( prop ) {\n\t\tif ( !settings.hasOwnProperty( prop ) ) {\n\t\t\tthrow new Error( \"Missing required setting: \" + prop );\n\t\t}\n\t});\n\n\tvar parsedUrl = Client.parseUrl( settings.url );\n\tthis.rpc = xmlrpc[ parsedUrl.secure ? \"createSecureClient\" : \"createClient\" ]({\n\t\thost: settings.host || parsedUrl.host,\n\t\tport: parsedUrl.port,\n\t\tpath: parsedUrl.path,\n\t\trejectUnauthorized: settings.rejectUnauthorized !== undefined ? settings.rejectUnauthorized : true,\n\n\t\t// Always set Host header in case we're pointing to a different server\n\t\t// via settings.host\n\t\theaders: {\n\t\t\tHost: parsedUrl.host\n\t\t},\n\t\tbasic_auth: !settings.basicAuth ? null : {\n\t\t\tuser: settings.basicAuth.username,\n\t\t\tpass: settings.basicAuth.password\n\t\t}\n\t});\n\tthis.blogId = settings.blogId || 0;\n\tthis.username = settings.username;\n\tthis.password = settings.password;\n}\n\nClient.parseUrl = function( wpUrl ) {\n\tvar urlParts, secure;\n\n\t// allow URLs without a protocol\n\tif ( !(/\\w+:\\/\\//.test( wpUrl ) ) ) {\n\t\twpUrl = \"http://\" + wpUrl;\n\t}\n\turlParts = url.parse( wpUrl );\n\tsecure = urlParts.protocol === \"https:\";\n\n\treturn {\n\t\thost: urlParts.hostname,\n\t\tport: urlParts.port || (secure ? 443 : 80),\n\t\tpath: urlParts.path.replace( /\\/+$/, \"\" ) + \"/xmlrpc.php\",\n\t\tsecure: secure\n\t};\n};\n\nextend( Client.prototype, {\n\tcall: function( method ) {\n\t\tvar args = parseArguments( arguments ),\n\t\t\tfn = args.pop();\n\n\t\tif ( typeof fn !== \"function\" ) {\n\t\t\targs.push( fn );\n\t\t\tfn = null;\n\t\t}\n\n\t\tthis.rpc.methodCall( method, args, function( error, data ) {\n\t\t\tif ( !error ) {\n\t\t\t\treturn fn( null, data );\n\t\t\t}\n\n\t\t\tif ( error.code === \"ENOTFOUND\" && error.syscall === \"getaddrinfo\" ) {\n\t\t\t\terror.message = \"Unable to connect to WordPress.\";\n\t\t\t} else if ( error.message === \"Unknown XML-RPC tag 'TITLE'\" ) {\n\t\t\t\tvar additional = error.res.statusCode;\n\t\t\t\tif (error.res.statusMessage) {\n\t\t\t\t\tadditional += \"; \" + error.res.statusMessage;\n\t\t\t\t}\n\n\t\t\t\terror.message = \"(\" + additional + \") \" + error.message;\n\t\t\t}\n\n\t\t\tfn( error );\n\t\t});\n\t},\n\n\tauthenticatedCall: function() {\n\t\tvar args = [].slice.call( arguments );\n\t\targs.splice( 1, 0, this.blogId, this.username, this.password );\n\t\tthis.call.apply( this, args );\n\t},\n\n\tlistMethods: function( fn ) {\n\t\tthis.call( \"system.listMethods\", fn );\n\t}\n});\n\nextend( Client.prototype, {\n\tgetPost: function( id, fields, fn ) {\n\t\tif ( typeof fields === \"function\" ) {\n\t\t\tfn = fields;\n\t\t\tfields = null;\n\t\t}\n\n\t\tif ( fields ) {\n\t\t\tfields = fieldMap.array( fields, \"post\" );\n\t\t}\n\n\t\tthis.authenticatedCall( \"wp.getPost\", id, fields, function( error, post ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tfn( null, fieldMap.from( post, \"post\" ) );\n\t\t});\n\t},\n\n\tgetPosts: function( filter, fields, fn ) {\n\t\tif ( typeof filter === \"function\" ) {\n\t\t\tfn = filter;\n\t\t\tfields = null;\n\t\t\tfilter = {};\n\t\t}\n\n\t\tif ( typeof fields === \"function\" ) {\n\t\t\tfn = fields;\n\t\t\tfields = null;\n\t\t}\n\n\t\tif ( filter.type ) {\n\t\t\tfilter.post_type = filter.type;\n\t\t\tdelete filter.type;\n\t\t}\n\n\t\tif ( filter.status ) {\n\t\t\tfilter.post_status = filter.status;\n\t\t\tdelete filter.status;\n\t\t}\n\n\t\tif ( filter.orderby ) {\n\t\t\tfilter.orderby = fieldMap.array( [ filter.orderby ], \"post\" )[ 0 ];\n\t\t}\n\n\t\tif ( fields ) {\n\t\t\tfields = fieldMap.array( fields, \"post\" );\n\t\t}\n\n\t\tthis.authenticatedCall( \"wp.getPosts\", filter, fields, function( error, posts ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tfn( null, posts.map(function( post ) {\n\t\t\t\treturn fieldMap.from( post, \"post\" );\n\t\t\t}));\n\t\t});\n\t},\n\n\tnewPost: function( data, fn ) {\n\t\tthis.authenticatedCall( \"wp.newPost\", fieldMap.to( data, \"post\" ), fn );\n\t},\n\n\t// to remove a term, just set the terms and leave out the id that you want to remove\n\t// to remove a custom field, pass the id with no key or value\n\teditPost: function( id, data, fn ) {\n\t\tthis.authenticatedCall( \"wp.editPost\", id, fieldMap.to( data, \"post\" ), fn );\n\t},\n\n\tdeletePost: function( id, fn ) {\n\t\tthis.authenticatedCall( \"wp.deletePost\", id, fn );\n\t},\n\n\tgetPostType: function( name, fields, fn ) {\n\t\tif ( typeof fields === \"function\" ) {\n\t\t\tfn = fields;\n\t\t\tfields = null;\n\t\t}\n\n\t\tif ( fields ) {\n\t\t\tfields = fieldMap.array( fields, \"postType\" );\n\t\t}\n\n\t\tthis.authenticatedCall( \"wp.getPostType\", name, fields, function( error, postType ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tfn( null, fieldMap.from( postType, \"postType\" ) );\n\t\t});\n\t},\n\n\tgetPostTypes: function( filter, fields, fn ) {\n\t\tif ( typeof filter === \"function\" ) {\n\t\t\tfn = filter;\n\t\t\tfields = null;\n\t\t\tfilter = {};\n\t\t}\n\n\t\tif ( typeof fields === \"function\" ) {\n\t\t\tfn = fields;\n\t\t\tfields = null;\n\t\t}\n\n\t\tif ( Array.isArray(filter) ) {\n\t\t\tfields = filter;\n\t\t\tfilter = {};\n\t\t}\n\n\t\tif ( fields ) {\n\t\t\tfields = fieldMap.array( fields, \"postType\" );\n\t\t}\n\n\t\tthis.authenticatedCall( \"wp.getPostTypes\", filter, fields, function( error, postTypes ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tObject.keys( postTypes ).forEach(function( postType ) {\n\t\t\t\tpostTypes[ postType ] = fieldMap.from( postTypes[ postType ], \"postType\" );\n\t\t\t});\n\t\t\tfn( null, postTypes );\n\t\t});\n\t}\n});\n\nextend( Client.prototype, {\n\tgetTaxonomy: function( name, fn ) {\n\t\tthis.authenticatedCall( \"wp.getTaxonomy\", name, function( error, taxonomy ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tfn( null, fieldMap.from( taxonomy, \"taxonomy\" ) );\n\t\t});\n\t},\n\n\tgetTaxonomies: function( fn ) {\n\t\tthis.authenticatedCall( \"wp.getTaxonomies\", function( error, taxonomies ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tfn( null, taxonomies.map(function( taxonomy ) {\n\t\t\t\treturn fieldMap.from( taxonomy, \"taxonomy\" );\n\t\t\t}));\n\t\t});\n\t},\n\n\tgetTerm: function( taxonomy, id, fn ) {\n\t\tthis.authenticatedCall( \"wp.getTerm\", taxonomy, id, function( error, term ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tfn( null, fieldMap.from( term, \"term\" ) );\n\t\t});\n\t},\n\n\tgetTerms: function( taxonomy, filter, fn ) {\n\t\tif ( typeof filter === \"function\" ) {\n\t\t\tfn = filter;\n\t\t\tfilter = {};\n\t\t}\n\n\t\tif ( filter.hideEmpty ) {\n\t\t\tfilter.hide_empty = filter.hideEmpty;\n\t\t\tdelete filter.hideEmpty;\n\t\t}\n\n\t\tif ( filter.orderby ) {\n\t\t\tfilter.orderby = fieldMap.array( [ filter.orderby ], \"term\" )[ 0 ];\n\t\t}\n\n\t\tthis.authenticatedCall( \"wp.getTerms\", taxonomy, filter, function( error, terms ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tfn( null, terms.map(function( term ) {\n\t\t\t\treturn fieldMap.from( term, \"term\" );\n\t\t\t}));\n\t\t});\n\t},\n\n\tnewTerm: function( data, fn ) {\n\t\tthis.authenticatedCall( \"wp.newTerm\", fieldMap.to( data, \"term\" ), fn );\n\t},\n\n\teditTerm: function( id, data, fn ) {\n\t\tthis.authenticatedCall( \"wp.editTerm\", id, fieldMap.to( data, \"term\" ), fn );\n\t},\n\n\tdeleteTerm: function( taxonomy, id, fn ) {\n\t\tthis.authenticatedCall( \"wp.deleteTerm\", taxonomy, id, fn );\n\t}\n});\n\nextend( Client.prototype, {\n\tgetMediaItem: function( id, fn ) {\n\t\tthis.authenticatedCall( \"wp.getMediaItem\", id, function( error, media ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tfn( null, fieldMap.from( media, \"media\" ) );\n\t\t});\n\t},\n\n\tgetMediaLibrary: function( filter, fn ) {\n\t\tif ( typeof filter === \"function\" ) {\n\t\t\tfn = filter;\n\t\t\tfilter = {};\n\t\t}\n\n\t\tthis.authenticatedCall( \"wp.getMediaLibrary\", filter, function( error, media ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn fn( error );\n\t\t\t}\n\n\t\t\tfn( null, media.map(function( item ) {\n\t\t\t\treturn fieldMap.from( item, \"media\" );\n\t\t\t}));\n\t\t});\n\t},\n\n\tuploadFile: function( data, fn ) {\n\t\tthis.authenticatedCall( \"wp.uploadFile\", fieldMap.to( data, \"file\" ), fn );\n\t}\n});\n\nmodule.exports = {\n\tClient: Client,\n\n\tcreateClient: function( settings ) {\n\t\treturn new Client( settings );\n\t},\n\n\tfieldMap: fieldMap\n};\n","/home/travis/build/npmtest/node-npmtest-wordpress/node_modules/wordpress/lib/fields.js":"var maps = {};\n\nfunction extend( a, b ) {\n\tfor ( var p in b ) {\n\t\ta[ p ] = b[ p ];\n\t}\n\n\treturn a;\n}\n\nfunction createFieldMaps( renames, toFns, fromFns ) {\n\tvar to = extend( {}, renames ),\n\t\tfrom = {};\n\n\tObject.keys( renames ).forEach(function( key ) {\n\t\tfrom[ renames[ key ] ] = key;\n\t});\n\n\treturn {\n\t\trenames: renames,\n\t\tto: extend( to, toFns ),\n\t\tfrom: extend( from, fromFns )\n\t};\n}\n\nfunction mapFields( data, map ) {\n\tvar field, value, mappedField,\n\t\tret = {};\n\n\tfor ( field in data ) {\n\t\tvalue = data[ field ];\n\t\tmappedField = map[ field ];\n\n\t\t// no map -> delete\n\t\tif ( !mappedField ) {\n\t\t\tcontinue;\n\t\t// string -> change field name\n\t\t} else if ( typeof mappedField === \"string\" ) {\n\t\t\tret[ mappedField ] = value;\n\t\t// function -> merge result\n\t\t} else {\n\t\t\textend( ret, mappedField( value ) );\n\t\t}\n\t}\n\n\treturn ret;\n}\n\nmaps.labels = createFieldMaps({\n\taddNewItem: \"add_new_item\",\n\taddOrRemoveItems: \"add_or_remove_items\",\n\tallItems: \"all_items\",\n\tchooseFromMostUsed: \"choose_from_most_used\",\n\teditItem: \"edit_item\",\n\tmenuName: \"menu_name\",\n\tname: \"name\",\n\tnameAdminBar: \"name_admin_bar\",\n\tnewItemName: \"new_item_name\",\n\tparentItem: \"parent_item\",\n\tparentItemColon: \"parent_item_colon\",\n\tpopularItems: \"popular_items\",\n\tsearchItems: \"search_items\",\n\tseparateItemsWithCommas: \"separate_items_with_commas\",\n\tsingularName: \"singular_name\",\n\tupdateItem: \"update_item\",\n\tviewItem: \"view_item\"\n});\n\nmaps.post = createFieldMaps({\n\tauthor: /* int */ \"post_author\",\n\tcommentStatus: /* string */ \"comment_status\",\n\tcontent: /* string */ \"post_content\",\n\tcustomFields: /* array */ \"custom_fields\",\n\tdate: /* datetime */ \"post_date\",\n\texcerpt: /* string */ \"post_excerpt\",\n\tformat: /* string */\"post_format\",\n\tid: /* string */ \"post_id\", /* readonly */\n\tlink: /* string */ \"link\" /* readonly */,\n\tmodified: /* datetime */ \"post_modified\",\n\tmenuOrder: /* int */ \"menu_order\",\n\tname: /* string */ \"post_name\",\n\tpageTemplate: /* string */ \"page_template\",\n\tparent: /* int */ \"post_parent\",\n\tpassword: /* string */ \"post_password\",\n\tpingStatus: /* string */ \"ping_status\",\n\tstatus: /* string */ \"post_status\",\n\tsticky: /* bool */ \"sticky\",\n\tterms: /* struct */ \"terms\" /* array */,\n\ttermNames: /* struct */ \"terms_names\",\n\tthumbnail: /* int */ \"post_thumbnail\",\n\ttitle: /* string */ \"post_title\",\n\ttype: /* string */ \"post_type\"\n}, {}, {\n\tpost_date_gmt: /* datetime */ function( date ) {\n\t\treturn {\n\t\t\tdate: new Date( date )\n\t\t};\n\t},\n\tpost_modified_gmt: /* datetime */ function( date ) {\n\t\treturn {\n\t\t\tmodified: new Date( date )\n\t\t};\n\t}\n});\n\nmaps.postType = createFieldMaps({\n\t_builtin: /* bool */ \"_builtin\",\n\tcap: /* struct */ \"cap\",\n\tcapabilityType: /* string */ \"capability_type\",\n\tdescription: /* string */ \"description\",\n\t_editLink: /* string */ \"_edit_link\",\n\texcludeFromSearch: /* bool */ \"exclude_from_search\",\n\thasArchive: /* bool */ \"has_archive\",\n\thierarchical: /* bool */ \"hierarchical\",\n\tlabel: /* string */ \"label\",\n\tlabels: /* struct */ \"labels\",\n\tmapMetaCap: /* bool */ \"map_meta_cap\",\n\tmenuIcon: /* string */ \"menu_icon\",\n\tmenuPosition: /* int */ \"menu_position\",\n\tname: /* string */ \"name\",\n\t\"public\": /* bool */ \"public\",\n\tpubliclyQuerably: /* bool */ \"publicly_queryable\",\n\tqueryVar: /* mixed */ \"query_var\",\n\trewrite: /* mixed */ \"rewrite\",\n\tshowInAdminBar: /* bool */ \"show_in_admin_bar\",\n\tshowInMenu: /* bool */ \"show_in_menu\",\n\tshowInNavMenus: /* bool */ \"show_in_nav_menus\",\n\tshowUi: /* bool */ \"show_ui\",\n\tsupports: /* array */ \"supports\",\n\ttaxonomies: /* array */ \"taxonomies\"\n}, {}, {\n\tcap: function( cap ) {\n\t\treturn { cap: mapFields( cap, maps.postTypeCap.from ) };\n\t},\n\tlabels: function( labels ) {\n\t\treturn { labels: mapFields( labels, maps.labels.from ) };\n\t}\n});\n\nmaps.postTypeCap = createFieldMaps({\n\tdeleteOthersPosts: /* string */ \"delete_others_posts\",\n\tdeletePost: /* string */ \"delete_post\",\n\tdeletePosts: /* string */ \"delete_posts\",\n\tdeletePrivatePosts: /* string */ \"delete_private_posts\",\n\tdeletePublishedPosts: /* string */ \"delete_published_posts\",\n\teditOthersPosts: /* string */ \"edit_others_posts\",\n\teditPost: /* string */ \"edit_post\",\n\teditPosts: /* string */ \"edit_posts\",\n\teditPrivatePosts: /* string */ \"edit_private_posts\",\n\teditPublishedPosts: /* string */ \"edit_published_posts\",\n\tpublishPosts: /* string */ \"publish_posts\",\n\tread: /* string */ \"read\",\n\treadPost: /* sring */ \"read_post\",\n\treadPrivatePosts: /* string */ \"read_private_posts\"\n});\n\nmaps.taxonomy = createFieldMaps({\n\tcap: /* struct */ \"cap\",\n\thierarchical: /* bool */ \"hierarchical\",\n\tname: /* string */ \"name\",\n\tlabel: /* string */ \"label\",\n\tlabels: /* struct */ \"labels\",\n\tobjectType: /* array */ \"object_type\",\n\t\"public\": /* bool */ \"public\",\n\tqueryVar: /* string */ \"query_var\",\n\trewrite: /* struct */ \"rewrite\",\n\tshowInNavMenus: /* bool */ \"show_in_nav_menus\",\n\tshowTagCloud: /* bool */ \"show_tagcloud\",\n\tshowUi: /* bool */ \"show_ui\"\n}, {}, {\n\tcap: function( cap ) {\n\t\treturn { cap: mapFields( cap, maps.taxonomyCap.from ) };\n\t},\n\tlabels: function( labels ) {\n\t\treturn { labels: mapFields( labels, maps.labels.from ) };\n\t}\n});\n\nmaps.taxonomyCap = createFieldMaps({\n\tassignTerms: /* string */ \"assign_terms\",\n\tdeleteTerms: /* string */ \"delete_terms\",\n\teditTerms: /* string */ \"edit_terms\",\n\tmanageTerms: /* string */ \"manage_terms\"\n});\n\nmaps.term = createFieldMaps({\n\tcount: /* int */ \"count\", /* readonly */\n\tdescription: /* string */ \"description\",\n\tname: /* string */ \"name\",\n\tparent: /* string */ \"parent\",\n\tslug: /* string */ \"slug\",\n\ttaxonomy: /* string */ \"taxonomy\",\n\ttermId: /* string */ \"term_id\", /* readonly */\n\ttermTaxonomyId: /* string */ \"term_taxonomy_id\" /* readonly */\n});\n\nmaps.file = createFieldMaps({\n\tname: /* string */ \"name\",\n\ttype: /* string */ \"type\",\n\tbits: /* string */ \"bits\",\n\toverwrite: /* boolean */ \"overwrite\",\n\tpostId: /* int */ \"post_id\"\n});\n\nmaps.media = createFieldMaps({\n\tattachmentId: /* string */ \"attachment_id\", /* readonly */\n\tcaption: /* string */ \"caption\",\n\tdescription: /* string */ \"description\",\n\tlink: /* string */ \"link\",\n\tparent: /* int */ \"parent\",\n\tthumbnail: /* string */ \"thumbnail\",\n\ttitle: /* string */ \"title\",\n\ttype: /* string */ \"type\"\n}, {}, {\n\tdate_created_gmt: /* datetime */ function( date ) {\n\t\treturn {\n\t\t\tdate: new Date( date )\n\t\t};\n\t},\n\n\tmetadata: /* struct */ function( data ) {\n\t\treturn {\n\t\t\tmetadata: mapFields( data, maps.mediaItemMetadata.from )\n\t\t};\n\t}\n});\n\nmaps.mediaItemMetadata = createFieldMaps({\n\tfile: /* string */ \"file\",\n\theight: /* int */ \"height\",\n\tsizes: /* struct */ \"sizes\",\n\twidth: /* int */ \"width\"\n}, {}, {\n\tsizes: /* struct */ function( size ) {\n\t\tvar keys = Object.keys( size ),\n\t\t    results = {};\n\n\t\t// Loop through the available sizes and map the fields\n\t\tkeys.forEach(function( key, i ) {\n\t\t\tresults[ keys[ i ] ] = mapFields( size[ keys[ i ] ], maps.mediaItemSize.from );\n\t\t});\n\n\t\treturn {\n\t\t\tsizes: results\n\t\t};\n\t},\n\n\timage_meta: /* struct */ function( data ) {\n\t\treturn {\n\t\t\timageMeta: mapFields( data, maps.postThumbnailImageMeta.from )\n\t\t};\n\t}\n});\n\nmaps.mediaItemSize = createFieldMaps({\n\tfile: /* string */ \"file\",\n\theight: /* string */ \"height\",\n\tmimeType: /* string */ \"mime-type\",\n\twidth: /* string */ \"width\"\n});\n\nmaps.postThumbnailImageMeta = createFieldMaps({\n\taperture: /* int */ \"aperture\",\n\tcamera: /* string */ \"camera\",\n\tcaption: /* string */ \"caption\",\n\tcopyright: /* string */ \"copyright\",\n\tcreatedTimestamp: /* int */ \"created_timestamp\",\n\tcredit: /* string */ \"credit\",\n\tfocalLength: /* int */ \"focal_length\",\n\tiso: /* int */ \"iso\",\n\tkeywords: /* array */ \"keywords\",\n\torientation: /* string */ \"orientation\",\n\tshutterSpeed: /* int */ \"shutter_speed\",\n\ttitle: /* string */ \"title\"\n});\n\nmodule.exports = {\n\tto: function( data, type ) {\n\t\treturn mapFields( data, maps[ type ].to );\n\t},\n\tfrom: function( data, type ) {\n\t\treturn mapFields( data, maps[ type ].from );\n\t},\n\tarray: function( data, type ) {\n\t\tvar map = maps[ type ].renames;\n\t\treturn data.map(function( field ) {\n\t\t\treturn map[ field ];\n\t\t});\n\t}\n};\n"}